#labels mutex
= How to use mutex lock during store key/value =

== Introduction ==

  *pthread_mutex_t cache_lock; (Lock for cache operations (item_*, assoc_*))
  *static pthread_mutex_t slabs_lock = PTHREAD_MUTEX_INITIALIZER; (Access to the slab allocator is protected by this lock)


== Details ==

store_item
{{{
    pthread_mutex_lock(&cache_lock);     // Lock for cache operations (item_*, assoc_*)
    ret = do_store_item(item, comm, c);
    pthread_mutex_unlock(&cache_lock);
}}}
-- do_store_item
   {{{
       new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, 
                it->nbytes + old_it->nbytes - 2 /* CRLF */);

       ........

       do_item_link(it);
   }}}
   -- do_item_alloc
      {{{
          item *it = slabs_alloc(ntotal, id);
          
      }}}
      -- slabs_alloc  
         {{{
                 pthread_mutex_lock(&slabs_lock);
                 ret = do_slabs_alloc(size, id);        // alloc memory for item from slab
                 pthread_mutex_unlock(&slabs_lock);
         }}}
   -- do_item_link
      {{{
          assoc_insert(it); // map key to 'item *' in hash table
      }}}     